#!/usr/bin/env joker

(ns wz-flow
  (:require [git :refer [repo current-branch]]
            [git-flow]
            [github]
            [joker.string :as str]
            [joker.os :as os]
            [joker.yaml :as yaml]))

(def config-file (str ((os/env) "HOME") "/.config/wz-flow"))

; load config
(when-not (os/exists? config-file)
  (let [user (do (print "github.com username: ") (read-line))
        pass (do (print "github.com password for" user "(never stored): ") (read-line)) ; todo: hide pass input
        otp  (do (print "two-factor authentication code: ") (read-line))
        [status resp] (github/personal-access-token user pass otp)]
    (if (= 201 status)
      (spit config-file (yaml/write-string {:github {:user user :token (resp "token")}}))
      (do (github/display-error resp)
          (os/exit -1)))))

(def config (yaml/read-string (slurp config-file)))

(if (not-any? #(= "finish" %) *command-line-args*)
  ; call git flow command
  (let [{:keys [out err]} (os/exec "git" {:args (cons "flow" *command-line-args*)})]
    (print (if (str/blank? out) err out)))
  
  ; we handle finish command by ourselves
  (if-not (git-flow/working-branch? current-branch)
    (println "The current HEAD is no feature branch.")
    
    (let [target-branch (git-flow/merge->branch current-branch)
          [status resp] (github/pull-requests (get-in config ["github" "token"]) (:owner repo) (:name repo) current-branch target-branch)
          pr (first resp)]
      (cond
        (not= 200 status)
        (github/display-error resp)

        (empty? resp)
        (printf "No PR has been created from %v to %v on repository %v.\n" current-branch target-branch (:name repo))

        (nil? (pr "merged_at"))
        (printf "The PR #%v on repo %v/%v has not been merged yet.\n" (pr "number") (:owner repo) (:name repo))

        :else
        (pprint current-branch)))))
